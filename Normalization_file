from pyspark.sql import SparkSession
from pyspark.sql.functions import col, expr

# Initialize Spark Session
spark = SparkSession.builder \
    .appName("Name Normalization") \
    .getOrCreate()

# 1. Load wire_trxn table, selecting only txn_id and name1 to name6
wire_trxn_df = spark.table("wire_trxn") \
    .select("txn_id", "name1", "name2", "name3", "name4", "name5", "name6")

# 2. Load normalization_table and collect as a list of (input, normalized) pairs
normalization_df = spark.table("normalization_table")
normalization_pairs = normalization_df.select("input_string", "normalized_string").collect()

# 3 & 4. Apply normalization using native Spark functions
normalized_df = wire_trxn_df

# For each name column, chain multiple regexp_replace operations
for i in range(1, 7):
    name_col = f"name{i}"
    normalized_col = f"name{i}_c"
    
    # Start with the original column
    expr = col(name_col)
    
    # Apply all replacements using regexp_replace
    for row in normalization_pairs:
        input_string = row["input_string"]
        normalized_string = row["normalized_string"]
        # Escape special regex characters in the input string
        escaped_input = input_string.replace(".", "\\.").replace("*", "\\*").replace("?", "\\?")
        expr = expr.cast("string").regexp_replace(escaped_input, normalized_string)
    
    # Add the normalized column
    normalized_df = normalized_df.withColumn(normalized_col, expr)

# 5. Create first temporary table 'b' with all required columns
normalized_df.createOrReplaceTempView("b")

# 6. Create a second temporary table from the first one for the final output
spark.sql("""
    CREATE OR REPLACE TEMPORARY VIEW normalized_output AS
    SELECT * FROM b
""")

# Verify both temporary tables are available
print("Temporary table 'b' has been created and is available for querying.")
print("Temporary table 'normalized_output' has been created as the final output.")

# Show a sample of the normalized data
print("\nSample of normalized output:")
spark.sql("SELECT * FROM normalized_output LIMIT 5").show(truncate=False)
```
